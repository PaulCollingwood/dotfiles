#!/bin/zsh

# This takes the pom file in the current directory and updates the dependency on the specified artifact
# This takes the following options:
# -h help message
# -p [PROJECT] get the dependencies for the project specified
# -f [FILE] get the dependencies for the file specified
# -a [MAVEN ARTIFACT DECLARATION] set the version as specified by the maven declaration
#                                 maven declarations are like:
#                                   com.sensibledevelopment.auction:auction:1.0.79
#                                   groupId:artifactId:version
# You can specify multiple updates

VERSION="0.1"

setopt extended_glob

function help () {
    cat << EOF
This gets the declared maven group id, artifact id, and version for the current project.
useage: $0 options

OPTIONS:
 -h This help message
 -p [PROJECT] get the version number for the project specified
 -f [FILE] get the version number for the pom.xml file specified
 -a [MAVEN ARTIFACT DECLARATION] set the version as specified by the maven declaration
                                 maven declarations are like:
                                   com.sensibledevelopment.auction:auction:1.0.79
                                   groupId:artifactId:version
EOF
}

function error () {
    echo $1 1>&2
    exit 1
}

# This gets the maven declaration which states groupId artifactId and version
function get_maven_declaration () {
    local file=$1

    m-get-version -f "${file}"
}

# This performs the xslt transformation that updates the version number in the pom file
# The pom file should be the standard input of this function
function update_file () {
    read groupId artifactId version<<<$(echo ${1} | tr ':' ' ')

    xsltproc --stringparam groupId ${groupId} --stringparam artifactId ${artifactId} --stringparam version ${version} ~/Programming/Shell/bin/m-set-version.xslt -
}

# This updates the pom file, which should be the standard input of this function
# The exit status of this is the status of the SNAPSHOT variable (if SNAPSHOT becomes 0 then it should no longer be updated)
function handle_pom () {
    local mavenDeclaration=$(get_maven_declaration "${1}")

echo "${1} -> ${mavenDeclaration}" >&2
    update_file "${mavenDeclaration}"
    echo ${mavenDeclaration} | cut -d':' -f3 | grep 'SNAPSHOT' > /dev/null
}

if [ "$(git status --porcelain)" != "" ]
then
    error "This should not be run while git is not fully checked in"
fi

FILE=$(pwd)/pom.xml
CONTENT=$(cat ${FILE})
MESSAGE=
SNAPSHOT=1 # Bash truth, so 0 = true
while getopts "hp:f:a:" option
do
    case ${option} in
        h)
            help
            exit 1
            ;;
        p)
            if [ "$(echo ${OPTARG} | cut -c1)" = "/" ]
            then
                # Absolute path provided
                current=${OPTARG}
            else
                current=~/Programming/Java/${OPTARG}
            fi
            for pom in ${current}/**/pom.xml~(${current}/target/**|${current}/**/target/**)
            do
                CONTENT=$(echo ${CONTENT} | handle_pom "${pom}")
                [[ $? -eq 0 && ${SNAPSHOT} -ne 0 ]] && SNAPSHOT=0
            done
            current=${current}/pom.xml # for the message update
            ;;
        f)
            # Make the path absolute so the project name can be reliably gained
            if [ "$(echo ${OPTARG} | cut -c1)" = "/" ]
            then
                current=${OPTARG}
            else
                current=$(pwd)/${OPTARG}
            fi
            CONTENT=$(echo ${CONTENT} | handle_pom "${pom}")
            [[ $? -eq 0 && ${SNAPSHOT} -ne 0 ]] && SNAPSHOT=0
            ;;
        ?)
            # Exit if a required parameter is missing
            # This is things like -p [NO PROJECT SPECIFIED]
            # From http://aplawrence.com/Unix/getopts.html
            # If "getopts" encounters an unwanted argument, and hasn't been silenced by a leading ":", the "$flag" in our script above will be set to "?":
            echo
            help
            exit 1;
            ;;
    esac

    project=$(echo ${current}(:h:t))
    if [ "${MESSAGE}" = "" ]
    then
        MESSAGE=${project}
    else
        MESSAGE="${MESSAGE}, ${project}"
    fi
done

if [ "${MESSAGE}" = "" ]
then
    error "Nothing done..."
fi

echo "${CONTENT}" > "${FILE}"

if [ "$(git status --porcelain)" = "" ]
then
    error "Nothing done..."
fi
if [ ${SNAPSHOT} -eq 0 ]
then
    MESSAGE="Updated dependency on ${MESSAGE} (SNAPSHOT)"
else
    MESSAGE="Updated dependency on ${MESSAGE} (non snapshot)"
fi

git commit -a -F - <<EOF
${MESSAGE}

Update performed by m-set-version version ${VERSION}
EOF
