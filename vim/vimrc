" Guard against loading this twice. This does mean you cannot do:
" source $MYVIMRC
" to pick up changes, but that isn't usually what you want anyway (it does not
" clear existing settings that are no longer being set).
if ( exists('g:loaded_vimrc') && g:loaded_vimrc )
    finish
endif
let g:loaded_vimrc = 1

""""""""""""""""""""""""""""
" PRE PLUGIN CONFIGURATION "
""""""""""""""""""""""""""""

let g:NumberToggleTrigger="<leader>n"

"""""""""""""
" NEOBUNDLE "
"""""""""""""

if has('vim_starting')
    " install neobundle stuff!
    " inspired by: http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/
    if !filereadable(expand('~/.vim/bundle/neobundle.vim/README.md'))
        echo "Installing NeoBundle.."
        echo ""
        silent !mkdir -p ~/.vim/bundle
        silent !git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
    endif

    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif
call neobundle#rc(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle "altercation/vim-colors-solarized.git"
NeoBundle "bronson/vim-visual-star-search"
NeoBundle "dart-lang/dart-vim-plugin.git"
NeoBundle "godlygeek/tabular.git"
NeoBundle "groenewege/vim-less.git"
NeoBundle "hail2u/vim-css3-syntax.git"
NeoBundle "jeffkreeftmeijer/vim-numbertoggle"
NeoBundle "jnwhiteh/vim-golang.git"
NeoBundle "kien/ctrlp.vim"
NeoBundle "majutsushi/tagbar.git"
NeoBundle "mileszs/ack.vim.git"
NeoBundle "scrooloose/nerdtree.git"
NeoBundle "scrooloose/syntastic.git"
NeoBundle "tpope/vim-fugitive.git"
NeoBundle "tpope/vim-markdown.git"
NeoBundle "tpope/vim-repeat"
NeoBundle "tpope/vim-sensible.git"
NeoBundle "tpope/vim-surround.git"
NeoBundle "tpope/vim-unimpaired.git"
NeoBundle "vim-perl/vim-perl"
NeoBundle "vim-scripts/kwbdi.vim.git"
NeoBundle "vim-scripts/nginx.vim.git"

if has( 'python' )
    NeoBundle "actionshrimp/vim-xpath.git"

    if ( v:version > 704 || ( v:version > 703 && has( 'patch584' ) ) )
        NeoBundle "Valloric/YouCompleteMe"
    endif
endif
if exists("$JS_CMD") || executable('node') || executable('nodejs') || executable('js')
    NeoBundle "hallettj/jslint.vim.git"
endif

NeoBundle "matthewfranglen/vim-mf-defaults.git"

NeoBundleCheck

""""""""""
" COLORS "
""""""""""

" Convince Vim it can use 256 colors inside Gnome Terminal.
" Needs CSApprox plugin
set t_Co=256

let g:solarized_termcolors=256
colorscheme solarized
set background=dark

""""""""""""""
" KEYMAPPING "
""""""""""""""

" \f now formats perl scripts with perltidy
autocmd! FileType perl :nnoremap <leader>f :1,$!perltidy<CR>

" \l now Data::Dumps the current WORD
" nnoremap <C-L> diWi{ print Data::Dumper->new( [ <Esc>p$a ] )->Dump; <Esc>p$a }<Esc>
nnoremap <leader>l diWiprint Data::Dumper->new( [ <C-R>" ] )->Dump;<Esc>

" Fugitive bindings
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit<CR>

" Just want the syntax highlighting to work!
function! s:MyGitDiff()
    execute s:ExecuteInShell('git diff')
    set syntax=diff
endfunction
command! MyGitDiff call s:MyGitDiff()

nnoremap <leader>gd :MyGitDiff<CR>

"""""""""""""""""""
" SHELL TO BUFFER "
"""""""""""""""""""

" Execute shell commands as :Shell <CMD> and they will be written to a buffer.
" Slight adjustment to:
" http://vim.wikia.com/wiki/Display_shell_commands%27_output_on_Vim_window
"
" This does preserve buffers, but realise that new buffers are created for
" different commands. Inside the buffer for a command you can rerun the
" command that generated that buffer with <leader>r.

function! s:ExecuteInShell(command)
    let command = join(map(split(a:command), 'expand(v:val)'))
    let winnr = bufwinnr('^' . command . '$')
    silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
    setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
    echo 'Execute ' . command . '...'
    silent! execute 'silent %!'. command

    " This resizes the window to match the number of lines in the output of
    " the command. That can be much too big sometimes so it is disabled for
    " now.
    " silent! execute 'resize ' . line('$')

    " This resizes to the length of the output, but no more than one third of
    " the screen.
    let one_third = &lines / 3
    let command_size = line('$')
    let window_size = command_size < one_third ? command_size : one_third
    silent! execute 'resize ' . window_size

    silent! redraw
    silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
    silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
    echo 'Shell command ' . command . ' executed.'
endfunction
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)


"""""""""""""""""""
" BUNDLE SETTINGS "
"""""""""""""""""""

if has('python') || has('python3')
    set rtp+=~/.powerline/powerline/bindings/vim
endif

" http://stackoverflow.com/questions/5601749/how-to-filter-out-files-by-extension-in-nerdtree
let NERDTreeIgnore = ['\.pyc$']

" Toggle Tags with <F8>, Nerdtree with <F7>
nnoremap <F7> :NERDTreeToggle<CR><C-W>l
nnoremap <F8> :TagbarToggle<CR>

let g:syntastic_python_checkers=['python', 'pyflakes', 'pep8', 'pylint']
