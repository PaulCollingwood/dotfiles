" Guard against loading this twice. This does mean you cannot do:
" source $MYVIMRC
" to pick up changes, but that isn't usually what you want anyway (it does not
" clear existing settings that are no longer being set).
if ( exists('g:loaded_vimrc') && g:loaded_vimrc )
    finish
endif
let g:loaded_vimrc = 1


" This allows you to issue a command that uses the names of all of the buffer
" files. For example:
" :exe '! git add ' . join(BuffersList(), ' ')
" Would add the file corresponding to every open buffer to git.
" See http://stackoverflow.com/a/271709/170865
function! BuffersList()
    let all = range(0, bufnr('$'))
    let result = []

    for b in all
        if buflisted(b)
            call add(result, bufname(b))
        endif
    endfor

    return result
endfunction


function s:LoadPlugins()
    if s:CannotLoadPlugins()
        return 0
    endif

    call s:PrepareForPluginLoad()

    if s:CanInstallPluginLoader() && s:PluginLoaderMissing()
        call s:InstallPluginLoader()
    endif

    call plug#begin('~/.vim/plugged')

    call s:RegisterPlugins()

    if s:PluginsMissing()
        PlugInstall
    endif

    call plug#helptags()
    call plug#end()

    call s:ConfigurePlugins()

    return 1
endfunction

function s:CannotLoadPlugins()
    return version <= 701
endfunction

function s:CanInstallPluginLoader()
    " Can only install the plugin loader when vim is starting
    return has('vim_starting')
endfunction

function s:PluginLoaderMissing()
    return !filereadable(expand('~/.vim/autoload/plug.vim'))
endfunction

function s:CanUsePython()
    return has( 'python' ) || has( 'python3' )
endfunction

function s:VersionSufficientToUseYouCompleteMe()
    return ( v:version > 704 || ( v:version > 703 && has( 'patch584' ) ) )
endfunction

function s:PluginsMissing()
    " The g:plugs map maps the plugin name to the settings for it.
    " The most relevant setting for this is the 'dir' setting which is the
    " destination folder.
    " Example (truncated) output of ':echo g:plugs':
    " {'vim-surround': {'uri': 'https://github.com/tpope/vim-surround.git', 'dir': '/home/matthew/.vim/plugged/vim-surround/', 'frozen': 0, 'branch': 'master'},...

    for spec in values(g:plugs)
        if !isdirectory(spec.dir)
            return 1
        endif
    endfor

    return 0
endfunction

function s:PrepareForPluginLoad()
    let g:NumberToggleTrigger="<leader>n"

    let g:syntastic_always_populate_loc_list = 1
endfunction

function s:InstallPluginLoader()
    echo "Installing Vim Plug.."
    echo ""
    silent !mkdir -p ~/.vim/autoload
    silent !curl -fLo ~/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endfunction

function s:RegisterPlugins()
    " Each of these is registered in the g:plugs map.
    Plug 'https://github.com/altercation/vim-colors-solarized.git'
    Plug 'https://github.com/bronson/vim-visual-star-search'
    Plug 'https://github.com/dart-lang/dart-vim-plugin.git'
    Plug 'https://github.com/godlygeek/tabular.git'
    Plug 'https://github.com/groenewege/vim-less.git'
    Plug 'https://github.com/hail2u/vim-css3-syntax.git'
    Plug 'https://github.com/jeffkreeftmeijer/vim-numbertoggle'
    Plug 'https://github.com/fatih/vim-go.git'
    Plug 'https://github.com/kien/ctrlp.vim'
    Plug 'https://github.com/majutsushi/tagbar.git'
    Plug 'https://github.com/mileszs/ack.vim.git'
    Plug 'https://github.com/scrooloose/nerdtree.git'
    Plug 'https://github.com/scrooloose/syntastic.git'
    Plug 'https://github.com/tpope/vim-commentary.git'
    Plug 'https://github.com/tpope/vim-fugitive.git'
    Plug 'https://github.com/tpope/vim-repeat'
    Plug 'https://github.com/tpope/vim-sensible.git'
    Plug 'https://github.com/tpope/vim-surround.git'
    Plug 'https://github.com/tpope/vim-unimpaired.git'
    Plug 'https://github.com/vim-perl/vim-perl'
    Plug 'https://github.com/vim-scripts/kwbdi.vim.git'
    Plug 'https://github.com/vim-scripts/nginx.vim.git'
    Plug 'https://github.com/matthewfranglen/vim-shell.git'
    Plug 'https://github.com/matthewfranglen/vim-scheme.git'
    Plug 'https://github.com/matthewfranglen/vim-mf-defaults.git'

    if s:CanUsePython() && s:VersionSufficientToUseYouCompleteMe()
        Plug 'https://github.com/Valloric/YouCompleteMe'
    endif
endfunction

function s:ConfigurePlugins()
    call s:ConfigureColors()
    call s:ConfigureMarkdown()
    call s:ConfigureNERDTree()
    call s:ConfigureSyntastic()

    if s:CanUsePython()
        call s:ConfigurePowerline()
    endif
endfunction

function s:ConfigureColors()
    " Convince Vim it can use 256 colors inside Gnome Terminal.
    " Needs CSApprox plugin
    set t_Co=256

    let g:solarized_termcolors=256
    colorscheme solarized
    set background=dark
endfunction

function s:ConfigurePowerline()
    set rtp+=/usr/local/src/powerline/powerline/bindings/vim
endfunction

function s:ConfigureNERDTree()
    " http://stackoverflow.com/questions/5601749/how-to-filter-out-files-by-extension-in-nerdtree
    let NERDTreeIgnore = ['\.pyc$']
endfunction

function s:ConfigureSyntastic()
    let g:syntastic_python_checkers=['python', 'pyflakes', 'pep8', 'pylint']
endfunction

function s:ConfigureMarkdown()
    " Set markdown filetype and spelling
    " Required otherwise .md is modulo-2 filetype
    autocmd BufNewFile,BufReadPost *.md set filetype=markdown
    autocmd BufRead,BufNewFile *.md setlocal spell
endfunction

function s:LoadKeymaps()
    autocmd FileType perl :call <SID>LoadPerlKeymaps()

    " Fugitive bindings
    nnoremap <unique> <leader>gs :Gstatus<CR>
    nnoremap <unique> <leader>gc :Gcommit<CR>
    noremap <unique> <script> <leader>gd :call <SID>ShowGitDiff()<CR>

    " Toggle Tags with <F8>, Nerdtree with <F7>
    nmap <F7> :NERDTreeToggle<CR><C-W>l
    nmap <F8> :TagbarToggle<CR>
endfunction

function s:LoadPerlKeymaps()
    nmap <leader>f :% ! perltidy<CR>
    iabbrev _dump Data::Dumper->new( [ ] )->Dump;
endfunction

function s:ShowGitDiff()
    execute s:ExecuteInShell('git diff')
    set syntax=diff
endfunction

function s:LoadCustomSettings()
    if filereadable("./vimrc")
        source ./vimrc
    endif
endfunction

call s:LoadPlugins()
call s:LoadKeymaps()

autocmd! VimEnter * :call <SID>LoadCustomSettings()
