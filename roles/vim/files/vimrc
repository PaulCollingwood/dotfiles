" Guard against loading this twice. This does mean you cannot do:
" source $MYVIMRC
" to pick up changes, but that isn't usually what you want anyway (it does not
" clear existing settings that are no longer being set).
if ( exists('g:loaded_vimrc') && g:loaded_vimrc )
    finish
endif
let g:loaded_vimrc = 1

""""""""""""""""""""""""""""
" PRE PLUGIN CONFIGURATION "
""""""""""""""""""""""""""""

let g:NumberToggleTrigger="<leader>n"

let g:syntastic_always_populate_loc_list = 1

""""""""""
" VUNDLE "
""""""""""

" Heavily based on https://github.com/roobert/dotfiles/blob/master/.vimrc
if version > 701

    let fresh_vundle=1
    syntax off

    if has('vim_starting')
        " install vundle stuff!
        " inspired by: http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc/
        if !filereadable(expand('~/.vim/bundle/Vundle.vim/README.md'))
            echo "Installing Vundle.."
            echo ""
            silent !mkdir -p ~/.vim/bundle
            silent !GIT_SSL_NO_VERIFY=1 git clone https://github.com/gmarik/Vundle.vim ~/.vim/bundle/Vundle.vim
        endif
    endif

    let plugins = [
        \"altercation/vim-colors-solarized.git",
        \"bronson/vim-visual-star-search",
        \"dart-lang/dart-vim-plugin.git",
        \"godlygeek/tabular.git",
        \"groenewege/vim-less.git",
        \"hail2u/vim-css3-syntax.git",
        \"jeffkreeftmeijer/vim-numbertoggle",
        \"fatih/vim-go.git",
        \"kien/ctrlp.vim",
        \"majutsushi/tagbar.git",
        \"mileszs/ack.vim.git",
        \"scrooloose/nerdtree.git",
        \"scrooloose/syntastic.git",
        \"tpope/vim-commentary.git",
        \"tpope/vim-fugitive.git",
        \"tpope/vim-repeat",
        \"tpope/vim-sensible.git",
        \"tpope/vim-surround.git",
        \"tpope/vim-unimpaired.git",
        \"vim-perl/vim-perl",
        \"vim-scripts/kwbdi.vim.git",
        \"vim-scripts/nginx.vim.git",
        \"matthewfranglen/vim-shell.git",
        \"matthewfranglen/vim-scheme.git",
        \"matthewfranglen/vim-mf-defaults.git",
    \]

    if has( 'python' )
        call add(plugins, "actionshrimp/vim-xpath.git")

        if ( v:version > 704 || ( v:version > 703 && has( 'patch584' ) ) )
            call add(plugins, "Valloric/YouCompleteMe")
        endif
    endif
    if exists("$JS_CMD") || executable('node') || executable('nodejs') || executable('js')
        call add(plugins, "hallettj/jslint.vim.git")
    endif

    set runtimepath+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    let vundle_new_plugins = 1

    for plugin in plugins
        " Strip the .git suffix from the plugin name
        let plugin_name = substitute(split(plugin, '/')[1], "\.git$", "", "")
        let plugin_dir = expand('~') . '/.vim/bundle/' . plugin_name

        if !isdirectory(plugin_dir)
            echo "Installing " . plugin_name
            let vundle_new_plugins = 0
        endif

        Plugin plugin
    endfor

    call vundle#end()

    if vundle_new_plugins == 0
        silent VundleInstall
        bdelete
    endif

    syntax on
endif

""""""""""
" COLORS "
""""""""""

" Convince Vim it can use 256 colors inside Gnome Terminal.
" Needs CSApprox plugin
set t_Co=256

let g:solarized_termcolors=256
colorscheme solarized
set background=dark

""""""""""""""
" KEYMAPPING "
""""""""""""""

" \f now formats perl scripts with perltidy
autocmd! FileType perl :nnoremap <leader>f :1,$!perltidy<CR>

" \l now Data::Dumps the current WORD
" nnoremap <C-L> diWi{ print Data::Dumper->new( [ <Esc>p$a ] )->Dump; <Esc>p$a }<Esc>
nnoremap <leader>l diWiprint Data::Dumper->new( [ <C-R>" ] )->Dump;<Esc>

" Fugitive bindings
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit<CR>

" Just want the syntax highlighting to work!
function! s:MyGitDiff()
    execute s:ExecuteInShell('git diff')
    set syntax=diff
endfunction
command! MyGitDiff call s:MyGitDiff()

nnoremap <leader>gd :MyGitDiff<CR>

"""""""""""""""""""
" BUNDLE SETTINGS "
"""""""""""""""""""

if has('python') || has('python3')
    set rtp+=~/.powerline/powerline/bindings/vim
endif

" http://stackoverflow.com/questions/5601749/how-to-filter-out-files-by-extension-in-nerdtree
let NERDTreeIgnore = ['\.pyc$']

" Toggle Tags with <F8>, Nerdtree with <F7>
nnoremap <F7> :NERDTreeToggle<CR><C-W>l
nnoremap <F8> :TagbarToggle<CR>

let g:syntastic_python_checkers=['python', 'pyflakes', 'pep8', 'pylint']

" Set markdown filetype and spelling
" Required otherwise .md is modulo-2 filetype
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd BufRead,BufNewFile *.md setlocal spell

"""""""""""""""""""""""""""
" CUSTOM RUNTIME SETTINGS "
"""""""""""""""""""""""""""

function! LoadCustomSettings()
if filereadable("./vimrc")
    source ./vimrc
endif
endfunction
autocmd! VimEnter * :call LoadCustomSettings()
